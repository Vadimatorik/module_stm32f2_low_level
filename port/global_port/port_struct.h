#pragma once

#include "f2_api_conf.h"

#ifdef MODULE_PORT

#include "pin_struct.h"

/**********************************************************************
 * Область enum class-ов.
 **********************************************************************/

/*
 * Ответы от функций reinit_all, reinit_port объекта global_port.
 */
enum class EC_ANSWER_GP {
    SUCCESS = 0,    // Переинициализация была успешной.
    LOOK    = 1     // Порт заблокирован, переинициализация некоторых
                    // (или всех) выводов невозможна.
};

/*
 * Состояние ключа блокировки порта.
 */
enum class EC_PORT_LOCKED_KEY {
    SET     = 1,
    RESET   = 0
};

/*
 * Возвращаемые значения функции блокировки порта/портов.
 */
enum class E_ANSWER_PORT_SET_LOCK {
    OK          = 0,    // Порт был успешно заблокирован.
    ALREADY     = 1,    // Порт был уже заблокирован до нас.
    ERROR       = 2	    // После попытки заблокировать порт -
                        // - порт не был заблокирован.
};

/**********************************************************************
 * Область упакованных структур.
 **********************************************************************/

/*
 * Структура содержит необходимые для инициализации порта данные.
 * Заполняется внутри объекта global_port при передаче в него массива pin_config элементов.
 */
struct __attribute__((packed)) port_registers_flash_copy_struct {
    uint32_t    p_port;     // Указатель на структуру порта port_registers_struct
                            // в области памяти периферии
                            // ( базовое смещение порта в карте памяти контроллера ).
    uint32_t    mode;       // Данные регистра выбора режима работы выводов.
    uint32_t    mode_res;   // Значение регистра moder, которое имеет порт по умолчанию
                            // ( для безопасного переключения ).
    uint32_t    otype;      // Данные регистра выбора режима выхода
                            // ( в случае, если вывод настроен как выход ).
    uint32_t    speed;      // Данные регистра выбора скорости выводов.
    uint32_t    pupd;       // Данные регистра включения подтяжки выводов.
    uint32_t    lck;        // Данные регистра блокировки настроек.
    uint32_t    afl;        // Данные младший регистра настроек альтернативных функций выводов.
    uint32_t    afh;        // Данные старший регистр настроек альтернативных функций выводов.
    uint32_t    od;         // Состояние на выводах порта после инициализации
                            // ( в случае, если выводы настроены как выходы ).
    uint32_t    p_look_key; // Указатель на бит блокировки в bit band регионе ( быстрое чтение ).
};

/*
 * Структура содержит в себе маски портов всех имеющихся регистров.
 * STM32_F2_PORT_COUNT - этот define автоматически определяется при
 * выборе конкретного контроллера в stm32_f20x_f21x_conf.h
 */
struct __attribute__((packed)) global_port_msk_reg_struct {
    const port_registers_flash_copy_struct    port[STM32_F2_PORT_COUNT];

    /*
     * Для включения/отключения тактирования портов.
     * Может быть использовано модулем RCC.
     */
    const uint32_t    clk_msk;
};




#endif
